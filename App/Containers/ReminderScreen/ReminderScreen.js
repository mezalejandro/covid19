import React, { Component } from 'react'
import {
  View,
  Text,
  Button,
  TextInput,
  StyleSheet,
  DeviceEventEmitter,
  TouchableOpacity,
  TouchableHighlightBase,
} from 'react-native'
import moment from 'moment'
import TimePicker24 from 'App/Components/TimePicker24'
import ReactNativeAN from 'react-native-alarm-notification'
import Icon from 'react-native-vector-icons/MaterialIcons'
import ReminderComponent from 'App/Components/ReminderComponent'
var PushNotification = require("react-native-push-notification");
import BackgroundTimer from 'react-native-background-timer';

export default class ReminderScreen extends Component {
  state = {
    selectedHoursHands: 2,
    selectedMinutesHands: 0,
    selectedHoursDrink: 0,
    selectedMinutesDrink: 30,
    open: false,
  }
  setAlarm(hrs, mins, type, id, title, msg, ticker, color) {
    const fireDate = ReactNativeAN.parseDate(
      new Date(Date.now() + hrs * 60 * 60 * 1000 + mins * 60 * 1000)
    )
    BackgroundTimer.runBackgroundTimer(() => { 
      PushNotification.configure({
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: onRegister, //this._onRegister.bind(this),
  
        // (required) Called when a remote or local notification is opened or received
        onNotification: onNotification, //this._onNotification,
  
        // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
        senderID: gcm,
  
        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
          alert: true,
          badge: true,
          sound: true
        },
  
        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,
  
        /**
          * (optional) default: true
          * - Specified if permissions (ios) and token (android and ios) will requested or not,
          * - if not, you must call PushNotificationsHandler.requestPermissions() later
          */
        requestPermissions: true,
      });
      
      //code that will be called every 3 seconds
      PushNotification.localNotification({
        /* Android Only Properties */
        id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
  
        /* iOS only properties */
        alertAction: 'view', // (optional) default: view
        category: null, // (optional) default: null
        userInfo: null, // (optional) default: null (object containing additional notification data)
  
        /* iOS and Android properties */
        title: "Local Notification", // (optional)
        message: "My Notification Message", // (required)
        playSound: false, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
      });
  
      BackgroundTimer.stopBackgroundTimer();
      }, 
      hrs * 60 * 60 * 1000 + mins * 60 * 1000);
    const alarmNotifData = {
      id: id, // Required
      title: title, // Required
      message: msg, // Required
      channel: 'my_channel_id', // Required. Same id as specified in MainApplication's onCreate method
      ticker: ticker,
      auto_cancel: true, // default: true
      vibrate: true,
      vibration: 5, // default: 100, no vibration if vibrate: false
      small_icon: 'ic_launcher', // Required
      large_icon: 'ic_launcher',
      play_sound: true,
      sound_name: null, // Plays custom notification ringtone if sound_name: null
      color: color,
      schedule_once: true, // Works with ReactNativeAN.scheduleAlarm so alarm fires once
      tag: 'some_tag',
      fire_date: fireDate, // Date for firing alarm, Required for ReactNativeAN.scheduleAlarm.
      // You can add any additional data that is important for the notification
      // It will be added to the PendingIntent along with the rest of the bundle.
      // e.g.
      data: { foo: 'bar' },
    }
    // ReactNativeAN.scheduleAlarm(alarmNotifData)
    alert("Reminder Set")
  }
  stopAndSetAlarm(hrs, mins, type, id, title, msg, ticker, color) {
    ReactNativeAN.stopAlarm()
    this.setAlarm(hrs, mins, type, id, title, msg, ticker, color)
    alert("On Snooze")
  }
  stopAlarm1(id) {
    ReactNativeAN.stopAlarm()
  }
  stopAlarm(id) {
    ReactNativeAN.stopAlarm()
    alert("Dismissing reminders")
  }
  componentDidMount() {
    DeviceEventEmitter.addListener(
      'OnNotificationDismissed',
      (async (e) => {
        const obj = JSON.parse(e)
        console.log('Dismissing Notif')
        console.log(obj)
        try {
          this.stopAndSetAlarm()
        } catch (error) {
          console.warn('iam throwing', error)
        }
      }).bind(this)
    )
    DeviceEventEmitter.addListener(
      'OnNotificationOpened',
      (async (e) => {
        const obj = JSON.parse(e)
        console.log('Opening Notif')
        console.log(this.state)
        this.setState({ open: true })
        console.log(obj)
      }).bind(this)
    )
  }
  componentWillUnmount() {
    DeviceEventEmitter.removeListener('OnNotificationDismissed')
    DeviceEventEmitter.removeListener('OnNotificationOpened')
  }
  setTime(hrs, mins) {
    this.setState({ selectedHoursHands: hrs, selectedMinutesHands: mins })
  }
  render() {
    return (
      <View style={styles.container}>
        <View style={styles.subContainer}>
          <Text style={styles.title}>Set Reminder for Washing Hands</Text>
          <ReminderComponent
            hrs={this.state.selectedHoursHands}
            mins={this.state.selectedMinutesHands}
            stopAlarm={this.stopAlarm}
            setAlarm={() =>
              this.setAlarm(
                this.state.selectedHoursHands,
                this.state.selectedMinutesHands,
                'hands',
                '1',
                'Wash Hands title',
                'Wash Hands Msg',
                'Wash Hands Ticker',
                'green'
              )
            }
            stopAndSetAlarm={() =>
              this.stopAndSetAlarm(
                this.state.selectedHoursHands,
                this.state.selectedMinutesHands,
                'hands',
                '1',
                'Wash Hands title',
                'Wash Hands Msg',
                'Wash Hands Ticker',
                'green'
              )
            }
            setTime={(hrs, mins) =>
              this.setState({ selectedHoursHands: hrs, selectedMinutesHands: mins })
            }
          />
          <Text style={styles.desc}>
            Washing your hands with soap and water or using alcohol-based hand rub kills viruses
            that may be on your hands
          </Text>
        </View>
        <View style={styles.subContainer}>
          <Text style={styles.title}>
            Set Reminder for Drinking Warm Water
          </Text>
          <ReminderComponent
            hrs={this.state.selectedHoursDrink}
            mins={this.state.selectedMinutesDrink}
            stopAlarm={this.stopAlarm}
            setAlarm={() =>
              this.setAlarm(
                this.state.selectedHoursDrink,
                this.state.selectedMinutesDrink,
                'hands',
                '2',
                'Drink Warm Water title',
                'Drink Warm Water Msg',
                'Drink Warm Water Ticker',
                'green'
              )
            }
            stopAndSetAlarm={() =>
              this.stopAndSetAlarm(
                this.state.selectedHoursDrink,
                this.state.selectedMinutesDrink,
                'hands',
                '2',
                'Drink Warm Water title',
                'Drink Warm Water Msg',
                'Drink Warm Water Ticker',
                'green'
              )
            }
            setTime={(hrs, mins) =>
              this.setState({ selectedHoursHands: hrs, selectedMinutesDrink: mins })
            }
          />
          <Text style={styles.desc}>
            Drinking Warm Water helps in removing germs present in your throat
          </Text>
        </View>
      </View>
    )
  }
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-evenly',
  },
  subContainer: {
    borderColor: 'black',
    // borderWidth: 0.5,
    borderRadius: 5,
    height: 320,
    width: 350,
    padding: 5,
    backgroundColor: '#efefef',
    elevation: 5,
    // margin: 10
  },
  title: {
    fontSize: 25,
  },
  desc: {
    fontSize: 15,
  },
})